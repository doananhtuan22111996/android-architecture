plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs.kotlin'
}

// Load keystore
def keystorePropertiesFile = rootProject.file("keystore.properties");
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion versions.application.compileSdkVersion

    defaultConfig {
        applicationId "vn.geekup.app"
        minSdkVersion versions.application.minSdkVersion
        targetSdkVersion versions.application.targetSdkVersion
        versionCode versions.application.versionCode
        versionName versions.application.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    signingConfigs {
        release {
            storeFile file(keystoreProperties['KEY_FILE'])
            storePassword keystoreProperties['KEY_PASS']
            keyAlias keystoreProperties['KEY_ALIAS']
            keyPassword keystoreProperties['KEY_PASS']
        }
    }

    buildTypes {
        debug {
            debuggable true
            shrinkResources false
            minifyEnabled false
        }
        release {
            debuggable false
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "mode"
    productFlavors {

        ext.loadConfig = { context ->
            Properties configProps = new Properties()
            configProps.load(project.rootProject.file("env.${context.name}.properties").newDataInputStream())
            context.applicationId configProps.getProperty("application.id")
            context.manifestPlaceholders = [
                    applicationName: configProps.getProperty("application.name"),
            ]
        }

        dev {
            dimension "mode"
            loadConfig(productFlavors.dev)
        }
        prod {
            dimension "mode"
            loadConfig(productFlavors.prod)
        }
    }
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release' && variant.getFlavors().get(0).name == 'dev') {
            variant.setIgnore(true)
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            Properties configProps = new Properties()
            configProps.load(project.rootProject.file("env.${variant.flavorName}.properties").newDataInputStream())
            def appName = configProps.getProperty("application.name")
            def formattedDate = new Date().format('yyyyddMMHHmm')
//            def newApkName = "${appName.toLowerCase().replace(" ", "_")}_${formattedDate}.apk"
            def newApkName = "${appName.toLowerCase().replace(" ", "_")}.apk"
            outputFileName = new File(newApkName)
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/jersey-module-version'
    }

    compileOptions {
        incremental true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    testImplementation "junit:junit:${versions.test.junit}"
    androidTestImplementation "androidx.test.ext:junit:${versions.test.androidxJunit}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.test.espressoCore}"

    implementation project(path: ':data')

    // Image
    implementation "io.coil-kt:coil:${versions.resource.coil}"

    // AndroidX
    implementation "com.google.android.material:material:${versions.google.material}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.androidX.constraintlayout}"
    implementation "androidx.core:core-splashscreen:${versions.androidX.splashScreen}"

    implementation "androidx.navigation:navigation-fragment-ktx:${versions.androidX.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${versions.androidX.navigation}"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.androidX.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.androidX.lifecycle}"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:${versions.swipeLayout.swiperefreshlayout}"

    // Paging
    implementation "androidx.paging:paging-runtime-ktx:$versions.androidX.paging"

    implementation "org.jsoup:jsoup:${versions.anothers.jsoup}"
}

kapt {
    correctErrorTypes true
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "500" // or whatever number you want
    }
}